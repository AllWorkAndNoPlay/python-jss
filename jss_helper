#!/usr/bin/env python
"""jss_helper

Command line utility using jss.py

Shea Craig 2014

"""

import argparse
import sys

import requests.exceptions

from jss import *


def print_object(objs):
    if isinstance(objs, list):
        for obj in objs:
            print("ID: %s\t\tNAME: %s" % (obj['id'], obj['name']))
    else:
        objs.pprint()


def create_func(obj_method):
    """Generates a function to perform basic list and xml queries."""
    def f(j, args):
        if args.id:
            id_ = int(args.id)
            try:
                results = obj_method(id_)
            except JSSGetError:
                print("Object ID: %s does not exist!" % id_)
                sys.exit(1)
        else:
            results = obj_method()
        print_object(results)

    return f


def get_group_policies(j, args):
    """Find all policies scoped to a group."""
    results = []
    for p in j.Policy():
        px = None
        while px is None:
            try:
                px = j.Policy(p.id())
                search = 'scope/computer_groups/computer_group'
                for computer_group in px.findall(search):
                    if computer_group.findtext('name') == args.group or \
                       computer_group.findtext('id') == args.group:
                        results.append((p.id(), p.name()))
            except requests.exceptions.SSLError as e:
                print("Failed... Trying again in a moment.")

    print("Policies in scope for %s:" % args.group)
    for i in results:
        print("ID: %s\t\tNAME: %s" % (i[0], i[1]))


def get_md_configp_group(j, args):
    """Find all mobile device configuration profiles scoped to a group."""
    results = []
    for p in j.MobileDeviceConfigurationProfile():
        px = None
        while px is None:
            try:
                px = j.MobileDeviceConfigurationProfile(p.id())
                search = 'scope/mobile_device_groups/mobile_device_group'
                for md_group in px.xml.findall(search):
                    if md_group.findtext('name') == args.group or \
                       md_group.findtext('id') == args.group:
                        results.append((p['id'], p['name']))
            except requests.exceptions.SSLError as e:
                print("Failed... Trying again in a moment.")

    print("Profiles in scope for %s:" % args.group)
    for i in results:
        print("ID: %s\t\tNAME: %s" % (i[0], i[1]))


def create_subparser(parser, name, help, func, **kwargs):
    """Create subparsers for our interface."""
    subparser = parser.add_parser(name, help=help)
    if kwargs:
        for arg_name, arg_help in kwargs.items():
            subparser.add_argument(arg_name, help=arg_help)
    subparser.set_defaults(func=func)


def main():
    """Run as a cli command."""
    jss_prefs = JSSPrefs()
    j = JSS(jss_prefs)

    # Create our argument parser
    parser = argparse.ArgumentParser(description="Query the JSS.")
    parser.add_argument('-v', action='store_true', help="Verbose output.")
    subparser = parser.add_subparsers(dest='subparser_name')

    subparsers = {}

    # computer
    subparsers['computer'] = {'help': "Get a list of all computers, or an "
                              "individual computer.",
                              'func': create_func(j.Computer),
                              'kwargs': {'--id': 'ID of computer to retrieve.'}
                             }
    subparsers['group'] = {'help': "Get a list of all computer groups, or an "
                              "individual group.",
                              'func': create_func(j.ComputerGroup),
                              'kwargs': {'--id': 'ID of computer group to '
                                         'retrieve.'}}
    subparsers['policy'] = {'help': "Get a list of all policies' names and "
                            "IDs, or the policy XML.",
                              'func': create_func(j.Policy),
                              'kwargs': {'--id': 'ID of policy to retrieve.',}}
    subparsers['policy_by_group'] = {'help': "Lists all policies scoped to "
                            "provided group.",
                              'func': get_group_policies,
                              'kwargs': {'group': 'Group name to query.'}}
    subparsers['category'] = {'help': "Get a list of all categories' names and "
                            "IDs.",
                              'func': create_func(j.Category),
                              'kwargs': {'--id': 'ID of category to retrieve.'}
                             }
    subparsers['md'] = {'help': "Get a list of mobile devices, or find one "
                            "by ID.",
                              'func': create_func(j.MobileDevice),
                              'kwargs': {'--id': 'ID of mobile device to '
                                         'retrieve.'}}
    subparsers['md_group'] = {'help': "Get a list of mobile device groups, "
                              "or find one by ID.",
                              'func': create_func(j.MobileDeviceGroup),
                              'kwargs': {'--id': 'ID of mobile device group '
                                         'to retrieve.'}}
    subparsers['md_configp'] = {'help': "Get a list of mobile device "
                                "configuration profiles, or find one by ID, ",
                               'func':
                               create_func(j.MobileDeviceConfigurationProfile),
                               'kwargs': {'--id': 'ID of mobile device '
                                          'configuration profile to retrieve.'}
                               }
    subparsers['md_configp_by_group'] = {'help': "Lists all mobile "
                                         "configuration profiles scoped to "
                                         "provided group.",
                                        'func': get_md_configp_group,
                                        'kwargs': {'group': 'Group name to '
                                                   'query.'}}

    for name, d in subparsers.items():
        create_subparser(subparser, name, d['help'], d['func'], **d['kwargs'])

    args = parser.parse_args()
    if args.v:
        j.verbose = True

    args.func(j, args)


if __name__ == '__main__':
    main()
