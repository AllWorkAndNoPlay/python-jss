#!/usr/bin/python
"""jss_helper

Command line utility using jss.py

Shea Craig 2014

"""

import argparse

import requests.exceptions

from jss import *


def print_object(objs):
    if isinstance(objs, list):
        for obj in objs:
            print("ID: %s\t\tNAME: %s" % (obj.id(), obj.name()))
    else:
        objs.pprint()


def get_computer(j, args):
    """Helper function."""
    if args.id:
        results = j.Computer(args.id)
    else:
        results = j.Computer()
    print_object(results)


def get_policy(j, args):
    """Helper function."""
    if args.id:
        results = j.Policy(args.id)
    else:
        results = j.Policy()
    print_object(results)


def get_group_policies(j, args):
    """Helper function."""
    results = []
    for p in j.Policy():
        px = None
        while px is None:
            try:
                px = j.Policy(p.id())
                search = 'scope/computer_groups/computer_group'
                for computer_group in px.xml.findall(search):
                    if computer_group.findtext('name') == args.group:
                        results.append((p.id(), p.name()))
            except requests.exceptions.SSLError as e:
                print("Failed... Trying again in a moment.")

    print("Policies in scope for %s:" % args.group)
    for i in results:
        print("ID: %s\t\tNAME: %s" % (i[0], i[1]))


def get_md(j, args):
    """Helper function."""
    if args.id:
        results = j.MobileDevice(args.id)
    else:
        results = j.MobileDevice()
    print_object(results)


def get_md_configp(j, args):
    """Helper function."""
    if args.id:
        results = j.MobileDeviceConfigurationProfile(args.id)
    else:
        results = j.MobileDeviceConfigurationProfile()
    print_object(results)


def get_md_group(j, args):
    """Helper function."""
    if args.id:
        results = j.MobileDeviceGroup(args.id)
    else:
        results = j.MobileDeviceGroup()
    print_object(results)


def get_md_configp_group(j, args):
    """Helper function."""
    results = []
    for p in j.MobileDeviceConfigurationProfile():
        px = None
        while px is None:
            try:
                px = j.MobileDeviceConfigurationProfile(p.id())
                search = 'scope/mobile_device_groups/mobile_device_group'
                for md_group in px.xml.findall(search):
                    if md_group.findtext('name') == args.group:
                        results.append((p.id(), p.name()))
            except requests.exceptions.SSLError as e:
                print("Failed... Trying again in a moment.")

    print("Profiles in scope for %s:" % args.group)
    for i in results:
        print("ID: %s\t\tNAME: %s" % (i[0], i[1]))


def main():
    """Run as a cli command."""

    jss_prefs = JSSPrefs()
    j = JSS(jss_prefs)

    # Create our argument parser
    parser = argparse.ArgumentParser(description="Query the JSS.")
    subparser = parser.add_subparsers(dest='subparser_name')

    # get_computer
    help = "Get a list of all computers, or an individual computer."
    subparser_policy = subparser.add_parser('computer', help=help)
    subparser_policy.add_argument('-id', help="ID of computer to retrieve.")
    subparser_policy.set_defaults(func=get_computer)

    # get_policy
    help = "Get a list of all policies' names and ids or the policy XML. "
    subparser_policy = subparser.add_parser('policy', help=help)
    subparser_policy.add_argument('-id', help="ID of policy to retrieve.")
    subparser_policy.set_defaults(func=get_policy)

    # policy_by_group
    help = "Lists all policies scoped to provided group."
    subparser_policy_by_group = subparser.add_parser('policy_by_group',
                                                     help=help)
    subparser_policy_by_group.add_argument('group', help="Group name to query.")
    subparser_policy_by_group.set_defaults(func=get_group_policies)

    # md
    help = ("Get a list of mobile devices, or find one by ID.")
    subparser_md = subparser.add_parser('md', help=help)
    subparser_md.add_argument('-id', help="ID of mobile device to retrieve.")
    subparser_md.set_defaults(func=get_md)

    # md_configp
    help = ("Get a list of mobile device configuration profiles, or find one"
            " by ID.")
    subparser_md_configp = subparser.add_parser('md_configp', help=help)
    subparser_md_configp.add_argument('-id', help="ID of profile to retrieve.")
    subparser_md_configp.set_defaults(func=get_md_configp)

    # md_group
    help = ("Get a list of mobile device groups, or an individual "
            "group's XML.")
    subparser_md_group= subparser.add_parser('md_group', help=help)
    subparser_md_group.add_argument('-id', help="ID of group to retrieve.")
    subparser_md_group.set_defaults(func=get_md_group)

    # md_config_by_group
    help = "List all configuration profiles scoped to group"
    subparser_md_configp_by_group = subparser.add_parser('md_configp_by_group',
                                                help=help)
    subparser_md_configp_by_group.add_argument('group',
                                               help="Group name to query.")
    subparser_md_configp_by_group.set_defaults(func=get_md_configp_group)

    # Parse the args and then call their target function
    args = parser.parse_args()
    args.func(j, args)


if __name__ == '__main__':
    main()
